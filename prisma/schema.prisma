// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

enum Category {
  code
  conversation
}

model Prompt {
  id            String   @id @default(uuid())
  userId        String
  userFirstName String
  name          String   @db.Text
  src           String
  description   String
  instructions  String   @db.Text
  category      Category
  isPublic      Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  promptHistory ChatHistory[]
}

// <----- Code ------->
model ChatHistory {
  id            String @id @default(uuid())
  userId        String
  userFirstName String
  name          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatMessages Messages[]

  Prompt   Prompt? @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId String?

  @@index([promptId])
}

enum Role {
  user
  system
  assistant
}

model Messages {
  id            String @id @default(uuid())
  userId        String
  userFirstName String
  role          Role
  content       String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatHistory   ChatHistory? @relation(fields: [chatHistoryId], references: [id], onDelete: Cascade)
  chatHistoryId String?

  @@index([chatHistoryId])
}
